// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastreams/MarketDepth.proto

package dalalstreet.api.datastreams;

/**
 * Protobuf type {@code proto.MarketDepthUpdate}
 */
public  final class MarketDepthUpdate extends
    com.google.protobuf.GeneratedMessageLite<
            MarketDepthUpdate, MarketDepthUpdate.Builder> implements
    // @@protoc_insertion_point(message_implements:proto.MarketDepthUpdate)
        MarketDepthUpdateOrBuilder {
  private MarketDepthUpdate() {
    latestTrades_ = emptyProtobufList();
    latestTradesDiff_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int STOCK_ID_FIELD_NUMBER = 1;
  private int stockId_;
  /**
   * <code>optional uint32 stock_id = 1;</code>
   */
  public int getStockId() {
    return stockId_;
  }
  /**
   * <code>optional uint32 stock_id = 1;</code>
   */
  private void setStockId(int value) {

    stockId_ = value;
  }
  /**
   * <code>optional uint32 stock_id = 1;</code>
   */
  private void clearStockId() {

    stockId_ = 0;
  }

  public static final int ASK_DEPTH_FIELD_NUMBER = 2;
  private static final class AskDepthDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        Integer, Integer> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<Integer, Integer>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0);
  }
  private com.google.protobuf.MapFieldLite<
      Integer, Integer> askDepth_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetAskDepth() {
    return askDepth_;
  }
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetMutableAskDepth() {
    if (!askDepth_.isMutable()) {
      askDepth_ = askDepth_.mutableCopy();
    }
    return askDepth_;
  }

  public int getAskDepthCount() {
    return internalGetAskDepth().size();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
   */

  public boolean containsAskDepth(
      int key) {

    return internalGetAskDepth().containsKey(key);
  }
  /**
   * Use {@link #getAskDepthMap()} instead.
   */
  @Deprecated
  public java.util.Map<Integer, Integer> getAskDepth() {
    return getAskDepthMap();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
   */

  public java.util.Map<Integer, Integer> getAskDepthMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetAskDepth());
  }
  /**
   * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
   */

  public int getAskDepthOrDefault(
      int key,
      int defaultValue) {

    java.util.Map<Integer, Integer> map =
        internalGetAskDepth();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
   */

  public int getAskDepthOrThrow(
      int key) {

    java.util.Map<Integer, Integer> map =
        internalGetAskDepth();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
   */
  private java.util.Map<Integer, Integer>
  getMutableAskDepthMap() {
    return internalGetMutableAskDepth();
  }

  public static final int BID_DEPTH_FIELD_NUMBER = 3;
  private static final class BidDepthDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        Integer, Integer> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<Integer, Integer>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0);
  }
  private com.google.protobuf.MapFieldLite<
      Integer, Integer> bidDepth_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetBidDepth() {
    return bidDepth_;
  }
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetMutableBidDepth() {
    if (!bidDepth_.isMutable()) {
      bidDepth_ = bidDepth_.mutableCopy();
    }
    return bidDepth_;
  }

  public int getBidDepthCount() {
    return internalGetBidDepth().size();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
   */

  public boolean containsBidDepth(
      int key) {

    return internalGetBidDepth().containsKey(key);
  }
  /**
   * Use {@link #getBidDepthMap()} instead.
   */
  @Deprecated
  public java.util.Map<Integer, Integer> getBidDepth() {
    return getBidDepthMap();
  }
  /**
   * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
   */

  public java.util.Map<Integer, Integer> getBidDepthMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetBidDepth());
  }
  /**
   * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
   */

  public int getBidDepthOrDefault(
      int key,
      int defaultValue) {

    java.util.Map<Integer, Integer> map =
        internalGetBidDepth();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
   */

  public int getBidDepthOrThrow(
      int key) {

    java.util.Map<Integer, Integer> map =
        internalGetBidDepth();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
   */
  private java.util.Map<Integer, Integer>
  getMutableBidDepthMap() {
    return internalGetMutableBidDepth();
  }

  public static final int ASK_DEPTH_DIFF_FIELD_NUMBER = 4;
  private static final class AskDepthDiffDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        Integer, Integer> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<Integer, Integer>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapFieldLite<
      Integer, Integer> askDepthDiff_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetAskDepthDiff() {
    return askDepthDiff_;
  }
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetMutableAskDepthDiff() {
    if (!askDepthDiff_.isMutable()) {
      askDepthDiff_ = askDepthDiff_.mutableCopy();
    }
    return askDepthDiff_;
  }

  public int getAskDepthDiffCount() {
    return internalGetAskDepthDiff().size();
  }
  /**
   * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
   */

  public boolean containsAskDepthDiff(
      int key) {

    return internalGetAskDepthDiff().containsKey(key);
  }
  /**
   * Use {@link #getAskDepthDiffMap()} instead.
   */
  @Deprecated
  public java.util.Map<Integer, Integer> getAskDepthDiff() {
    return getAskDepthDiffMap();
  }
  /**
   * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
   */

  public java.util.Map<Integer, Integer> getAskDepthDiffMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetAskDepthDiff());
  }
  /**
   * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
   */

  public int getAskDepthDiffOrDefault(
      int key,
      int defaultValue) {

    java.util.Map<Integer, Integer> map =
        internalGetAskDepthDiff();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
   */

  public int getAskDepthDiffOrThrow(
      int key) {

    java.util.Map<Integer, Integer> map =
        internalGetAskDepthDiff();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
   */
  private java.util.Map<Integer, Integer>
  getMutableAskDepthDiffMap() {
    return internalGetMutableAskDepthDiff();
  }

  public static final int BID_DEPTH_DIFF_FIELD_NUMBER = 5;
  private static final class BidDepthDiffDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        Integer, Integer> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<Integer, Integer>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapFieldLite<
      Integer, Integer> bidDepthDiff_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetBidDepthDiff() {
    return bidDepthDiff_;
  }
  private com.google.protobuf.MapFieldLite<Integer, Integer>
  internalGetMutableBidDepthDiff() {
    if (!bidDepthDiff_.isMutable()) {
      bidDepthDiff_ = bidDepthDiff_.mutableCopy();
    }
    return bidDepthDiff_;
  }

  public int getBidDepthDiffCount() {
    return internalGetBidDepthDiff().size();
  }
  /**
   * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
   */

  public boolean containsBidDepthDiff(
      int key) {

    return internalGetBidDepthDiff().containsKey(key);
  }
  /**
   * Use {@link #getBidDepthDiffMap()} instead.
   */
  @Deprecated
  public java.util.Map<Integer, Integer> getBidDepthDiff() {
    return getBidDepthDiffMap();
  }
  /**
   * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
   */

  public java.util.Map<Integer, Integer> getBidDepthDiffMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetBidDepthDiff());
  }
  /**
   * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
   */

  public int getBidDepthDiffOrDefault(
      int key,
      int defaultValue) {

    java.util.Map<Integer, Integer> map =
        internalGetBidDepthDiff();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
   */

  public int getBidDepthDiffOrThrow(
      int key) {

    java.util.Map<Integer, Integer> map =
        internalGetBidDepthDiff();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
   */
  private java.util.Map<Integer, Integer>
  getMutableBidDepthDiffMap() {
    return internalGetMutableBidDepthDiff();
  }

  public static final int LATEST_TRADES_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.ProtobufList<Trade> latestTrades_;
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  public java.util.List<Trade> getLatestTradesList() {
    return latestTrades_;
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  public java.util.List<? extends TradeOrBuilder>
      getLatestTradesOrBuilderList() {
    return latestTrades_;
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  public int getLatestTradesCount() {
    return latestTrades_.size();
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  public Trade getLatestTrades(int index) {
    return latestTrades_.get(index);
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  public TradeOrBuilder getLatestTradesOrBuilder(
      int index) {
    return latestTrades_.get(index);
  }
  private void ensureLatestTradesIsMutable() {
    if (!latestTrades_.isModifiable()) {
      latestTrades_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(latestTrades_);
     }
  }

  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void setLatestTrades(
      int index, Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesIsMutable();
    latestTrades_.set(index, value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void setLatestTrades(
      int index, Trade.Builder builderForValue) {
    ensureLatestTradesIsMutable();
    latestTrades_.set(index, builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void addLatestTrades(Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesIsMutable();
    latestTrades_.add(value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void addLatestTrades(
      int index, Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesIsMutable();
    latestTrades_.add(index, value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void addLatestTrades(
      Trade.Builder builderForValue) {
    ensureLatestTradesIsMutable();
    latestTrades_.add(builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void addLatestTrades(
      int index, Trade.Builder builderForValue) {
    ensureLatestTradesIsMutable();
    latestTrades_.add(index, builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void addAllLatestTrades(
      Iterable<? extends Trade> values) {
    ensureLatestTradesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, latestTrades_);
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void clearLatestTrades() {
    latestTrades_ = emptyProtobufList();
  }
  /**
   * <code>repeated .proto.Trade latest_trades = 6;</code>
   */
  private void removeLatestTrades(int index) {
    ensureLatestTradesIsMutable();
    latestTrades_.remove(index);
  }

  public static final int LATEST_TRADES_DIFF_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.ProtobufList<Trade> latestTradesDiff_;
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  public java.util.List<Trade> getLatestTradesDiffList() {
    return latestTradesDiff_;
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  public java.util.List<? extends TradeOrBuilder>
      getLatestTradesDiffOrBuilderList() {
    return latestTradesDiff_;
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  public int getLatestTradesDiffCount() {
    return latestTradesDiff_.size();
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  public Trade getLatestTradesDiff(int index) {
    return latestTradesDiff_.get(index);
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  public TradeOrBuilder getLatestTradesDiffOrBuilder(
      int index) {
    return latestTradesDiff_.get(index);
  }
  private void ensureLatestTradesDiffIsMutable() {
    if (!latestTradesDiff_.isModifiable()) {
      latestTradesDiff_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(latestTradesDiff_);
     }
  }

  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void setLatestTradesDiff(
      int index, Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.set(index, value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void setLatestTradesDiff(
      int index, Trade.Builder builderForValue) {
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.set(index, builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void addLatestTradesDiff(Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.add(value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void addLatestTradesDiff(
      int index, Trade value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.add(index, value);
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void addLatestTradesDiff(
      Trade.Builder builderForValue) {
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.add(builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void addLatestTradesDiff(
      int index, Trade.Builder builderForValue) {
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.add(index, builderForValue.build());
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void addAllLatestTradesDiff(
      Iterable<? extends Trade> values) {
    ensureLatestTradesDiffIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, latestTradesDiff_);
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void clearLatestTradesDiff() {
    latestTradesDiff_ = emptyProtobufList();
  }
  /**
   * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
   */
  private void removeLatestTradesDiff(int index) {
    ensureLatestTradesDiffIsMutable();
    latestTradesDiff_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (stockId_ != 0) {
      output.writeUInt32(1, stockId_);
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetAskDepth().entrySet()) {
      AskDepthDefaultEntryHolder.defaultEntry.serializeTo(
          output, 2, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetBidDepth().entrySet()) {
      BidDepthDefaultEntryHolder.defaultEntry.serializeTo(
          output, 3, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetAskDepthDiff().entrySet()) {
      AskDepthDiffDefaultEntryHolder.defaultEntry.serializeTo(
          output, 4, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetBidDepthDiff().entrySet()) {
      BidDepthDiffDefaultEntryHolder.defaultEntry.serializeTo(
          output, 5, entry.getKey(), entry.getValue());
    }
    for (int i = 0; i < latestTrades_.size(); i++) {
      output.writeMessage(6, latestTrades_.get(i));
    }
    for (int i = 0; i < latestTradesDiff_.size(); i++) {
      output.writeMessage(7, latestTradesDiff_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (stockId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, stockId_);
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetAskDepth().entrySet()) {
      size += AskDepthDefaultEntryHolder.defaultEntry.computeMessageSize(
        2, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetBidDepth().entrySet()) {
      size += BidDepthDefaultEntryHolder.defaultEntry.computeMessageSize(
        3, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetAskDepthDiff().entrySet()) {
      size += AskDepthDiffDefaultEntryHolder.defaultEntry.computeMessageSize(
        4, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<Integer, Integer> entry
         : internalGetBidDepthDiff().entrySet()) {
      size += BidDepthDiffDefaultEntryHolder.defaultEntry.computeMessageSize(
        5, entry.getKey(), entry.getValue());
    }
    for (int i = 0; i < latestTrades_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, latestTrades_.get(i));
    }
    for (int i = 0; i < latestTradesDiff_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, latestTradesDiff_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static MarketDepthUpdate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static MarketDepthUpdate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static MarketDepthUpdate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static MarketDepthUpdate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static MarketDepthUpdate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static MarketDepthUpdate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static MarketDepthUpdate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static MarketDepthUpdate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static MarketDepthUpdate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static MarketDepthUpdate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(MarketDepthUpdate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code proto.MarketDepthUpdate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
              MarketDepthUpdate, Builder> implements
      // @@protoc_insertion_point(builder_implements:proto.MarketDepthUpdate)
          MarketDepthUpdateOrBuilder {
    // Construct using dalalstreet.api.datastreams.MarketDepthUpdate.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    public int getStockId() {
      return instance.getStockId();
    }
    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    public Builder setStockId(int value) {
      copyOnWrite();
      instance.setStockId(value);
      return this;
    }
    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    public Builder clearStockId() {
      copyOnWrite();
      instance.clearStockId();
      return this;
    }


    public int getAskDepthCount() {
      return instance.getAskDepthMap().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public boolean containsAskDepth(
        int key) {

      return instance.getAskDepthMap().containsKey(key);
    }

    public Builder clearAskDepth() {
      copyOnWrite();
      instance.getMutableAskDepthMap().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public Builder removeAskDepth(
        int key) {

      copyOnWrite();
      instance.getMutableAskDepthMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getAskDepthMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, Integer> getAskDepth() {
      return getAskDepthMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    public java.util.Map<Integer, Integer> getAskDepthMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getAskDepthMap());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public int getAskDepthOrDefault(
        int key,
        int defaultValue) {

      java.util.Map<Integer, Integer> map =
          instance.getAskDepthMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public int getAskDepthOrThrow(
        int key) {

      java.util.Map<Integer, Integer> map =
          instance.getAskDepthMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    public Builder putAskDepth(
        int key,
        int value) {


      copyOnWrite();
      instance.getMutableAskDepthMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    public Builder putAllAskDepth(
        java.util.Map<Integer, Integer> values) {
      copyOnWrite();
      instance.getMutableAskDepthMap().putAll(values);
      return this;
    }


    public int getBidDepthCount() {
      return instance.getBidDepthMap().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public boolean containsBidDepth(
        int key) {

      return instance.getBidDepthMap().containsKey(key);
    }

    public Builder clearBidDepth() {
      copyOnWrite();
      instance.getMutableBidDepthMap().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public Builder removeBidDepth(
        int key) {

      copyOnWrite();
      instance.getMutableBidDepthMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getBidDepthMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, Integer> getBidDepth() {
      return getBidDepthMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    public java.util.Map<Integer, Integer> getBidDepthMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getBidDepthMap());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public int getBidDepthOrDefault(
        int key,
        int defaultValue) {

      java.util.Map<Integer, Integer> map =
          instance.getBidDepthMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public int getBidDepthOrThrow(
        int key) {

      java.util.Map<Integer, Integer> map =
          instance.getBidDepthMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    public Builder putBidDepth(
        int key,
        int value) {


      copyOnWrite();
      instance.getMutableBidDepthMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    public Builder putAllBidDepth(
        java.util.Map<Integer, Integer> values) {
      copyOnWrite();
      instance.getMutableBidDepthMap().putAll(values);
      return this;
    }


    public int getAskDepthDiffCount() {
      return instance.getAskDepthDiffMap().size();
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */

    public boolean containsAskDepthDiff(
        int key) {

      return instance.getAskDepthDiffMap().containsKey(key);
    }

    public Builder clearAskDepthDiff() {
      copyOnWrite();
      instance.getMutableAskDepthDiffMap().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */

    public Builder removeAskDepthDiff(
        int key) {

      copyOnWrite();
      instance.getMutableAskDepthDiffMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getAskDepthDiffMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, Integer> getAskDepthDiff() {
      return getAskDepthDiffMap();
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */
    public java.util.Map<Integer, Integer> getAskDepthDiffMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getAskDepthDiffMap());
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */

    public int getAskDepthDiffOrDefault(
        int key,
        int defaultValue) {

      java.util.Map<Integer, Integer> map =
          instance.getAskDepthDiffMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */

    public int getAskDepthDiffOrThrow(
        int key) {

      java.util.Map<Integer, Integer> map =
          instance.getAskDepthDiffMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */
    public Builder putAskDepthDiff(
        int key,
        int value) {


      copyOnWrite();
      instance.getMutableAskDepthDiffMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; ask_depth_diff = 4;</code>
     */
    public Builder putAllAskDepthDiff(
        java.util.Map<Integer, Integer> values) {
      copyOnWrite();
      instance.getMutableAskDepthDiffMap().putAll(values);
      return this;
    }


    public int getBidDepthDiffCount() {
      return instance.getBidDepthDiffMap().size();
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */

    public boolean containsBidDepthDiff(
        int key) {

      return instance.getBidDepthDiffMap().containsKey(key);
    }

    public Builder clearBidDepthDiff() {
      copyOnWrite();
      instance.getMutableBidDepthDiffMap().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */

    public Builder removeBidDepthDiff(
        int key) {

      copyOnWrite();
      instance.getMutableBidDepthDiffMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getBidDepthDiffMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, Integer> getBidDepthDiff() {
      return getBidDepthDiffMap();
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */
    public java.util.Map<Integer, Integer> getBidDepthDiffMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getBidDepthDiffMap());
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */

    public int getBidDepthDiffOrDefault(
        int key,
        int defaultValue) {

      java.util.Map<Integer, Integer> map =
          instance.getBidDepthDiffMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */

    public int getBidDepthDiffOrThrow(
        int key) {

      java.util.Map<Integer, Integer> map =
          instance.getBidDepthDiffMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */
    public Builder putBidDepthDiff(
        int key,
        int value) {


      copyOnWrite();
      instance.getMutableBidDepthDiffMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, int32&gt; bid_depth_diff = 5;</code>
     */
    public Builder putAllBidDepthDiff(
        java.util.Map<Integer, Integer> values) {
      copyOnWrite();
      instance.getMutableBidDepthDiffMap().putAll(values);
      return this;
    }

    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public java.util.List<Trade> getLatestTradesList() {
      return java.util.Collections.unmodifiableList(
          instance.getLatestTradesList());
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public int getLatestTradesCount() {
      return instance.getLatestTradesCount();
    }/**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Trade getLatestTrades(int index) {
      return instance.getLatestTrades(index);
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder setLatestTrades(
        int index, Trade value) {
      copyOnWrite();
      instance.setLatestTrades(index, value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder setLatestTrades(
        int index, Trade.Builder builderForValue) {
      copyOnWrite();
      instance.setLatestTrades(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder addLatestTrades(Trade value) {
      copyOnWrite();
      instance.addLatestTrades(value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder addLatestTrades(
        int index, Trade value) {
      copyOnWrite();
      instance.addLatestTrades(index, value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder addLatestTrades(
        Trade.Builder builderForValue) {
      copyOnWrite();
      instance.addLatestTrades(builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder addLatestTrades(
        int index, Trade.Builder builderForValue) {
      copyOnWrite();
      instance.addLatestTrades(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder addAllLatestTrades(
        Iterable<? extends Trade> values) {
      copyOnWrite();
      instance.addAllLatestTrades(values);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder clearLatestTrades() {
      copyOnWrite();
      instance.clearLatestTrades();
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades = 6;</code>
     */
    public Builder removeLatestTrades(int index) {
      copyOnWrite();
      instance.removeLatestTrades(index);
      return this;
    }

    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public java.util.List<Trade> getLatestTradesDiffList() {
      return java.util.Collections.unmodifiableList(
          instance.getLatestTradesDiffList());
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public int getLatestTradesDiffCount() {
      return instance.getLatestTradesDiffCount();
    }/**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Trade getLatestTradesDiff(int index) {
      return instance.getLatestTradesDiff(index);
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder setLatestTradesDiff(
        int index, Trade value) {
      copyOnWrite();
      instance.setLatestTradesDiff(index, value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder setLatestTradesDiff(
        int index, Trade.Builder builderForValue) {
      copyOnWrite();
      instance.setLatestTradesDiff(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder addLatestTradesDiff(Trade value) {
      copyOnWrite();
      instance.addLatestTradesDiff(value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder addLatestTradesDiff(
        int index, Trade value) {
      copyOnWrite();
      instance.addLatestTradesDiff(index, value);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder addLatestTradesDiff(
        Trade.Builder builderForValue) {
      copyOnWrite();
      instance.addLatestTradesDiff(builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder addLatestTradesDiff(
        int index, Trade.Builder builderForValue) {
      copyOnWrite();
      instance.addLatestTradesDiff(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder addAllLatestTradesDiff(
        Iterable<? extends Trade> values) {
      copyOnWrite();
      instance.addAllLatestTradesDiff(values);
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder clearLatestTradesDiff() {
      copyOnWrite();
      instance.clearLatestTradesDiff();
      return this;
    }
    /**
     * <code>repeated .proto.Trade latest_trades_diff = 7;</code>
     */
    public Builder removeLatestTradesDiff(int index) {
      copyOnWrite();
      instance.removeLatestTradesDiff(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:proto.MarketDepthUpdate)
  }
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new MarketDepthUpdate();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        askDepth_.makeImmutable();
        bidDepth_.makeImmutable();
        askDepthDiff_.makeImmutable();
        bidDepthDiff_.makeImmutable();
        latestTrades_.makeImmutable();
        latestTradesDiff_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        MarketDepthUpdate other = (MarketDepthUpdate) arg1;
        stockId_ = visitor.visitInt(stockId_ != 0, stockId_,
            other.stockId_ != 0, other.stockId_);
        askDepth_ = visitor.visitMap(
            askDepth_, other.internalGetAskDepth());
        bidDepth_ = visitor.visitMap(
            bidDepth_, other.internalGetBidDepth());
        askDepthDiff_ = visitor.visitMap(
            askDepthDiff_, other.internalGetAskDepthDiff());
        bidDepthDiff_ = visitor.visitMap(
            bidDepthDiff_, other.internalGetBidDepthDiff());
        latestTrades_= visitor.visitList(latestTrades_, other.latestTrades_);
        latestTradesDiff_= visitor.visitList(latestTradesDiff_, other.latestTradesDiff_);
        if (visitor == MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                stockId_ = input.readUInt32();
                break;
              }
              case 18: {
                if (!askDepth_.isMutable()) {
                  askDepth_ = askDepth_.mutableCopy();
                }
                AskDepthDefaultEntryHolder.defaultEntry.parseInto(askDepth_, input, extensionRegistry);  break;
              }
              case 26: {
                if (!bidDepth_.isMutable()) {
                  bidDepth_ = bidDepth_.mutableCopy();
                }
                BidDepthDefaultEntryHolder.defaultEntry.parseInto(bidDepth_, input, extensionRegistry);  break;
              }
              case 34: {
                if (!askDepthDiff_.isMutable()) {
                  askDepthDiff_ = askDepthDiff_.mutableCopy();
                }
                AskDepthDiffDefaultEntryHolder.defaultEntry.parseInto(askDepthDiff_, input, extensionRegistry);  break;
              }
              case 42: {
                if (!bidDepthDiff_.isMutable()) {
                  bidDepthDiff_ = bidDepthDiff_.mutableCopy();
                }
                BidDepthDiffDefaultEntryHolder.defaultEntry.parseInto(bidDepthDiff_, input, extensionRegistry);  break;
              }
              case 50: {
                if (!latestTrades_.isModifiable()) {
                  latestTrades_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(latestTrades_);
                }
                latestTrades_.add(
                    input.readMessage(Trade.parser(), extensionRegistry));
                break;
              }
              case 58: {
                if (!latestTradesDiff_.isModifiable()) {
                  latestTradesDiff_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(latestTradesDiff_);
                }
                latestTradesDiff_.add(
                    input.readMessage(Trade.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (MarketDepthUpdate.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:proto.MarketDepthUpdate)
  private static final MarketDepthUpdate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MarketDepthUpdate();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static MarketDepthUpdate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MarketDepthUpdate> PARSER;

  public static com.google.protobuf.Parser<MarketDepthUpdate> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

