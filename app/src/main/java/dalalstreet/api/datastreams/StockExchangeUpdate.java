// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastreams/StockExchange.proto

package dalalstreet.api.datastreams;

/**
 * Protobuf type {@code proto.StockExchangeUpdate}
 */
public  final class StockExchangeUpdate extends
    com.google.protobuf.GeneratedMessageLite<
            StockExchangeUpdate, StockExchangeUpdate.Builder> implements
    // @@protoc_insertion_point(message_implements:proto.StockExchangeUpdate)
        StockExchangeUpdateOrBuilder {
  private StockExchangeUpdate() {
  }
  public static final int STOCKS_IN_EXCHANGE_FIELD_NUMBER = 1;
  private static final class StocksInExchangeDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        Integer, StockExchangeDataPoint> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<Integer, StockExchangeDataPoint>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.UINT32,
                0,
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                StockExchangeDataPoint.getDefaultInstance());
  }
  private com.google.protobuf.MapFieldLite<
      Integer, StockExchangeDataPoint> stocksInExchange_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<Integer, StockExchangeDataPoint>
  internalGetStocksInExchange() {
    return stocksInExchange_;
  }
  private com.google.protobuf.MapFieldLite<Integer, StockExchangeDataPoint>
  internalGetMutableStocksInExchange() {
    if (!stocksInExchange_.isMutable()) {
      stocksInExchange_ = stocksInExchange_.mutableCopy();
    }
    return stocksInExchange_;
  }

  public int getStocksInExchangeCount() {
    return internalGetStocksInExchange().size();
  }
  /**
   * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
   */

  public boolean containsStocksInExchange(
      int key) {

    return internalGetStocksInExchange().containsKey(key);
  }
  /**
   * Use {@link #getStocksInExchangeMap()} instead.
   */
  @Deprecated
  public java.util.Map<Integer, StockExchangeDataPoint> getStocksInExchange() {
    return getStocksInExchangeMap();
  }
  /**
   * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
   */

  public java.util.Map<Integer, StockExchangeDataPoint> getStocksInExchangeMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetStocksInExchange());
  }
  /**
   * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
   */

  public StockExchangeDataPoint getStocksInExchangeOrDefault(
      int key,
      StockExchangeDataPoint defaultValue) {

    java.util.Map<Integer, StockExchangeDataPoint> map =
        internalGetStocksInExchange();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
   */

  public StockExchangeDataPoint getStocksInExchangeOrThrow(
      int key) {

    java.util.Map<Integer, StockExchangeDataPoint> map =
        internalGetStocksInExchange();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
   */
  private java.util.Map<Integer, StockExchangeDataPoint>
  getMutableStocksInExchangeMap() {
    return internalGetMutableStocksInExchange();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (java.util.Map.Entry<Integer, StockExchangeDataPoint> entry
         : internalGetStocksInExchange().entrySet()) {
      StocksInExchangeDefaultEntryHolder.defaultEntry.serializeTo(
          output, 1, entry.getKey(), entry.getValue());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<Integer, StockExchangeDataPoint> entry
         : internalGetStocksInExchange().entrySet()) {
      size += StocksInExchangeDefaultEntryHolder.defaultEntry.computeMessageSize(
        1, entry.getKey(), entry.getValue());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static StockExchangeUpdate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static StockExchangeUpdate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static StockExchangeUpdate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static StockExchangeUpdate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static StockExchangeUpdate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static StockExchangeUpdate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static StockExchangeUpdate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static StockExchangeUpdate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static StockExchangeUpdate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static StockExchangeUpdate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(StockExchangeUpdate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code proto.StockExchangeUpdate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
              StockExchangeUpdate, Builder> implements
      // @@protoc_insertion_point(builder_implements:proto.StockExchangeUpdate)
          StockExchangeUpdateOrBuilder {
    // Construct using dalalstreet.api.datastreams.StockExchangeUpdate.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }



    public int getStocksInExchangeCount() {
      return instance.getStocksInExchangeMap().size();
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */

    public boolean containsStocksInExchange(
        int key) {

      return instance.getStocksInExchangeMap().containsKey(key);
    }

    public Builder clearStocksInExchange() {
      copyOnWrite();
      instance.getMutableStocksInExchangeMap().clear();
      return this;
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */

    public Builder removeStocksInExchange(
        int key) {

      copyOnWrite();
      instance.getMutableStocksInExchangeMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getStocksInExchangeMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, StockExchangeDataPoint> getStocksInExchange() {
      return getStocksInExchangeMap();
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */
    public java.util.Map<Integer, StockExchangeDataPoint> getStocksInExchangeMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getStocksInExchangeMap());
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */

    public StockExchangeDataPoint getStocksInExchangeOrDefault(
        int key,
        StockExchangeDataPoint defaultValue) {

      java.util.Map<Integer, StockExchangeDataPoint> map =
          instance.getStocksInExchangeMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */

    public StockExchangeDataPoint getStocksInExchangeOrThrow(
        int key) {

      java.util.Map<Integer, StockExchangeDataPoint> map =
          instance.getStocksInExchangeMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */
    public Builder putStocksInExchange(
        int key,
        StockExchangeDataPoint value) {

      if (value == null) { throw new NullPointerException(); }
      copyOnWrite();
      instance.getMutableStocksInExchangeMap().put(key, value);
      return this;
    }
    /**
     * <code>map&lt;uint32, .proto.StockExchangeDataPoint&gt; stocks_in_exchange = 1;</code>
     */
    public Builder putAllStocksInExchange(
        java.util.Map<Integer, StockExchangeDataPoint> values) {
      copyOnWrite();
      instance.getMutableStocksInExchangeMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:proto.StockExchangeUpdate)
  }
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new StockExchangeUpdate();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        stocksInExchange_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        StockExchangeUpdate other = (StockExchangeUpdate) arg1;
        stocksInExchange_ = visitor.visitMap(
            stocksInExchange_, other.internalGetStocksInExchange());
        if (visitor == MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                if (!stocksInExchange_.isMutable()) {
                  stocksInExchange_ = stocksInExchange_.mutableCopy();
                }
                StocksInExchangeDefaultEntryHolder.defaultEntry.parseInto(stocksInExchange_, input, extensionRegistry);  break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (StockExchangeUpdate.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:proto.StockExchangeUpdate)
  private static final StockExchangeUpdate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StockExchangeUpdate();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static StockExchangeUpdate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StockExchangeUpdate> PARSER;

  public static com.google.protobuf.Parser<StockExchangeUpdate> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

